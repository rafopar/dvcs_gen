#include <TH1D.h>
#include <TH2D.h>
#include <TFile.h>
#include <iostream>
#include "TGenGeo.h"
#include "TGenPi0.h"
#include "TDVCSDB.h"
#include "TGenBase.h"
#include <TLorentzVector.h>

int main( int argc, char **argv)
{
  
  using namespace std;

  if( argc != 2 )
    {
      cout<<"The programm needs run number, please set run number as an argument"<<endl;
      cout<<"The programm will exit now"<<endl;
      exit(1);
    }   
      
  const double radian = 57.2957795130823229;
  const int nsim = 10000000;
  TDVCSDB *db=new TDVCSDB("dvcs","clrlpc",3306,"munoz","");
  int run_number = atoi(argv[1]);
  //Reading the database for this run number
  Double_t Ebeam=*db->GetEntry_d("BEAM_param_Energy",run_number);
  Double_t calo_dist=*db->GetEntry_d("CALO_geom_Dist",run_number);
  Double_t calo_angle=*db->GetEntry_d("CALO_geom_Yaw",run_number);
  Double_t HRS_angle=*db->GetEntry_d("SIMU_param_HRSangle",run_number);
  Double_t HRS_mom=*db->GetEntry_d("SIMU_param_HRSmomentum",run_number);
   
  double targ_length = 15; //cm 
  double targ_offs = 0; // Probably cm/dens
  double targ_dens = 0.0723;

  TGenPi0 *gEv = new TGenPi0(Ebeam, 0, UInt_t(10), UInt_t(20)); // P target
  gEv->SetTargetParam(targ_length, targ_offs, targ_dens);
  gEv->SetGeometry(HRS_angle, HRS_mom, calo_angle, calo_dist);

  TLorentzVector L_em_scat_v;
  TLorentzVector L_scat_el;
  TLorentzVector L_b(0, 0, Ebeam, Ebeam);
  
  TLorentzVector L_final_phot1, L_final_phot2, L_final_prot;
  TLorentzVector L_em_init, L_em_scat;

  double tM;
  double th, phi;

  TFile *file_out = new TFile("test_pi0_gen.root", "Recreate");
  TH2D *h_th_tM_1 = new TH2D("h_th_tM_1", "", 200, 0., 2.5, 200, 10., 30);
  TH2D *h_th_tM_2 = new TH2D("h_th_tM_2", "", 200, 0., 3.5, 200, 0., 50);

  TH2D *h_th_em_thg_1 = new TH2D("h_th_em_thg_1", "", 200, 0., 50, 200, 5, 35);
  TH2D *h_P_em_thg_1 = new TH2D("h_P_em_thg_1", "", 200, 0., 50., 200, 1.5, 4.5);
  TH2D *h_th_em_thg_2 = new TH2D("h_th_em_thg_2", "", 200, 0., 50, 200, 5, 35);
  TH2D *h_P_em_thg_2 = new TH2D("h_P_em_thg_2", "", 200, 0., 50., 200, 1.5, 4.5);

  for( int i = 0; i < nsim; i++ )
    {
      gEv->GenerateVertex();//Generates the vertex
      gEv->ExtBrem();//Make external pre-vertex radiative corrections
      gEv->GenKin();//Computes scattered electron kinematics
      gEv->IntRCBef();//Internal radiative corrections (before vertex)
  
      if(gEv->ComputeElectron())//Compute the scattered electron 4-vector
	{
	  L_em_scat_v = *gEv->GetScatteredElectron();
	  gEv->IntRCAft();//Internal radiative corrections (after vertex)
	  L_scat_el = *gEv->GetScatteredElectron();

	  gEv->Settmin( -3.); //Use this method to change tmin (default -2 GeV)
	  gEv->Settmax(0.);  //Use this method to change tmax (default 0 GeV)
          
	  gEv->ComputePi0(); // \gamma* p -> pi0 p
	  gEv->TwoBodyDecay(0.1349766,0.,0.); // pi0 mass
      
	  gEv->ApplySpecVerAcc();//Rotates all final vectors around the beam axis
	  

	  if(gEv->HitsSpectro(gEv->GetScatteredElectron()) && (gEv->HitsCalo(gEv->GetFinalPhoton1()) || gEv->HitsCalo(gEv->GetFinalPhoton2())) )
	    {
	      L_final_phot1 = *gEv->GetFinalPhoton1();
	      L_final_phot2 = *gEv->GetFinalPhoton2();
	      
	      L_final_prot = *gEv->GetFinalProton();
	      L_em_init = *gEv->GetInitialElectron();
	      L_em_scat = *gEv->GetScatteredElectron();
	      double th_em = atan(L_em_scat.Px()/L_em_scat.Pz())*radian;

	      if( L_final_phot1.E() > L_final_phot2.E() )
		{
		  tM = (L_em_init - L_em_scat - L_final_phot1).M2();
		  th = -atan(L_final_phot1.Px()/L_final_phot1.Pz())*radian;
		}
	      else
		{
		  tM = (L_em_init - L_em_scat - L_final_phot2).M2();
		  th = -atan(L_final_phot2.Px()/L_final_phot2.Pz())*radian;
		}
	      
	      h_th_tM_1->Fill(-tM, th);
	      h_th_tM_2->Fill(-tM, th);
		  h_th_em_thg_1->Fill(th, th_em);
		  h_P_em_thg_1->Fill(th, L_em_scat.P());
	      if( -tM < 0.3 )
		{
		  h_th_em_thg_2->Fill(th, th_em);
		  h_P_em_thg_2->Fill(th, L_em_scat.P());
		}
	    }
	}
    }
  h_th_tM_1->Write();
  h_th_tM_2->Write();
  h_th_em_thg_1->Write();
  h_P_em_thg_1->Write();
  h_th_em_thg_2->Write();
  h_P_em_thg_2->Write();
  file_out->Close();
  return 0;
}
